name: Server CI Pipeline

on:
  pull_request:

env:
  COMPOSE_FILE: packages/server/compose.ci.yml
  SERVER_IMAGE: ghcr.io/${{ github.repository }}/server/${{ github.ref_name }}:latest
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DB_USER: arcwell
  DB_PASSWORD: arcwell
  DB_DATABASE: arcwell_test
  APP_KEY: ${{ secrets.APP_KEY }}

jobs:
  changes:
    runs-on: ubuntu-latest

    outputs:
      server: ${{ steps.filter.outputs.server }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Filter paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            server:
              - 'packages/server/**'

  build-server:
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Pull Server Image for Cache (if exists)
        run: |
          docker pull ${{ env.SERVER_IMAGE }} || echo "No cache found for Server image."

      - name: Build and Push Server Image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/server
          file: ./packages/server/Dockerfile
          target: develop
          build-args: |
            NODE_ENV=development
            PORT=3333
          push: true
          tags: ${{ env.SERVER_IMAGE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save Docker Image
        run: |
          docker save ${{ env.SERVER_IMAGE }} -o server-image.tar

      - name: Upload Image Artifact
        uses: actions/upload-artifact@v3
        with:
          name: server-image
          path: server-image.tar

      - name: Health Check
        run: |
          docker compose up -d
          set -e
          echo "Checking health of the server..."
          # Retry the health check up to 10 times with a 10-second interval
          for i in {1..2}; do
            if docker compose exec server curl --fail http://localhost:3333/health; then
              echo "Health check passed!"
              break
            else
              echo "Health check failed, retrying in 5 seconds..."
              sleep 5
            fi
          done
          
          # If we exhausted all retries and curl still fails, exit the job
          if ! docker compose exec server curl --fail http://localhost:3333/health; then
            echo "Health check failed after 10 attempts. Exiting."
            docker compose logs server
            exit 1
          fi

  lint-server:
    needs: build-server

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Environment
        run: docker info

      - name: Download Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: server-image

      - name: Load Docker Image
        run: |
          docker load -i server-image.tar

      - name: Lint Server
        run: |
          docker compose run server npm run lint
        continue-on-error: true

  test-server:
    needs: build-server

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Environment
        run: docker info

      - name: Download Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: server-image

      - name: Load Docker Image
        run: |
          docker load -i server-image.tar

      - name: Test Server
        run: |
          docker compose run server npm run test
